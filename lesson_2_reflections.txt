What happens when you initialize a repository? Why do you need to do it?

	A hidden .git directory is created under the current directory. This indicates that the current durectory is to
	be version-controled using Git, and the directory will be used to store history and other meta data about this
	directory.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is a place the concentrates files that should be tracked for changes. It can contain only a part
	of the files on the working directory, and has no history yet, as opposed to files on the repository.
	Its value is allowing the user to decide which files he wishes to track and add to the repository in future commits.

How can you use the staging area to make sure you have one commit per logical change?

	I would only add to the staging area files that were changed is a single logical change, commit them, then add more
	files that were changed in a different logical change, and so on.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	For example, when I'm working on adding a new fearure, or an alternative version of my project. Branches would allow me to develop the new concept without changing the main project until it's fully developed. 

How do the diagrams help you visualize the branch structure?

	They allow me to see at which point each brach split from its parent branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	The result is a single branch, containing the changes from both branches. 

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

	pros: Fast and efficient, systematic. 
	cons: possibly prone to errors, can't resolve conflicts 
 